syntax = "proto3";

package api.v1.readme;

option go_package = "github.com/asjard/examples/protobuf/api/readmepb";

import "github.com/asjard/protobuf/http.proto";
import "google/protobuf/empty.proto";

service Examples {
    // 注释，描述这个接口的作用
    rpc Say(HelloReq) returns (HelloReq) {
        option (asjard.api.http) = {
            post : "/region/{region_id}/project/{project_id}/user/{user_id}"
        };
        option (asjard.api.http) = {
            get : "/region/{region_id}/project/{project_id}/user/{user_id}"
        };
    };
    // sse请求
    rpc Log(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (asjard.api.http) = {
            get : "/log"
        };
    };
    // Hello Example
    rpc Hello(google.protobuf.Empty) returns(HelloReq) {
        option (asjard.api.http) = {
            get: "/hello"
            api: "/"
            version: "/"
            group: "/"
            desc: "接口描述"
        };
    };
    // grpc请求
    rpc Call(HelloReq) returns (HelloReq) {};
}

message HelloReq {
    message Obj {
        int32  field_int = 1;
        string field_str = 2;
    }
    message Configs {
        string timeout                                            = 1;
        string field_in_different_file_under_same_section         = 2;
        string another_field_in_different_file_under_same_section = 3;
        string key_in_different_sourcer                           = 4;
    }
    message Instance {
        string              id          = 1;
        string              name        = 2;
        uint32              system_code = 3;
        string              version     = 4;
        map<string, string> metadata    = 5;
    }
    enum Kind {
        K_A = 0;
        K_B = 1;
    }
    // 区域ID
    string region_id = 1;
    // 项目ID
    string project_id = 2;
    // 用户ID
    int64 user_id = 3;

    // 对象
    Obj obj = 6;
    // 对象列表
    repeated Obj objs = 7;
    // 配置
    Configs configs = 8;
    // 分页
    int32 page = 9;
    // 每页大小
    int32 size = 10;
    // 排序
    string sort = 11;
    // 布尔类型
    optional bool ok = 12;
    // 可选枚举参数
    Kind  kind        = 15;
    bytes bytes_value = 17;
    // openapi 会把这个字段解析为字符串
    uint64   uint64_value = 18;
    Instance instance     = 23;
}
